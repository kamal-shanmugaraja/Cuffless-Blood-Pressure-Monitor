{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\bp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [data, setData] = useState([]);\n  const [message, setMessage] = useState('');\n  const [chartLabel, setChartLabel] = useState('');\n  const [renderChartFlag, setRenderChartFlag] = useState(false); // Flag to control chart rendering\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  useEffect(() => {\n    // Only render the chart if data is available and the component has mounted\n    if (data.length > 0 && chartRef.current && renderChartFlag) {\n      renderChart();\n    }\n  }, [data, renderChartFlag]);\n  const fetchData = async endpoint => {\n    try {\n      const response = await axios.get(`http://127.0.0.1:80/api/${endpoint}`);\n      setData(response.data);\n      setMessage(''); // Clear any previous message\n      setRenderChartFlag(true); // Set the flag to render the chart\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setMessage(`Error fetching data: ${error.message}`);\n    }\n  };\n  const fetchAverageAndPredictedBPData = async () => {\n    try {\n      const averageBPResponse = await axios.get('http://127.0.0.1:80/api/average_bp');\n      const {\n        average_systolic,\n        average_diastolic\n      } = averageBPResponse.data;\n      const predictedBPResponse = await axios.get('http://127.0.0.1:80/api/calculated_bp');\n\n      // Set the message to be displayed on the website\n      setMessage(`Calculated Average Systolic Pressure is ${average_systolic} and Calculated Average Diastolic Pressure is ${average_diastolic}`);\n      setData(predictedBPResponse.data);\n      setChartLabel('Predicted Blood Pressure Data');\n      setRenderChartFlag(true); // Set renderChartFlag to true after fetching both average and predicted BP data\n    } catch (error) {\n      console.error('Error fetching average and predicted BP data:', error);\n      setMessage(`Error fetching average and predicted BP data: ${error.message}`);\n    }\n  };\n  const renderChart = () => {\n    const ctx = chartRef.current.getContext('2d');\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    const chartData = {\n      labels: data.map((_, index) => index + 1),\n      datasets: [{\n        label: chartLabel,\n        data: data,\n        borderColor: 'rgba(75, 192, 192, 1)',\n        borderWidth: 2,\n        fill: false\n      }]\n    };\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: chartData\n    });\n  };\n  const handleBack = () => {\n    // Clear the chart and data\n    setData([]);\n    setMessage(''); // Clear any previous message\n    setChartLabel('');\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    // Reset the flag to false when going back\n    setRenderChartFlag(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          fetchData('ppg');\n          setChartLabel('PPG Data');\n        },\n        children: \"Plot PPG Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          fetchData('ecg');\n          setChartLabel('ECG Data');\n        },\n        children: \"Plot ECG Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchAverageAndPredictedBPData,\n        children: \"Calculated Blood Pressure Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBack,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 19\n    }, this), renderChartFlag && /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"myChart\",\n      width: \"400\",\n      height: \"200\",\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"bpvHph6WClSZzUokkzwodM5ANgA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","Chart","jsxDEV","_jsxDEV","App","_s","data","setData","message","setMessage","chartLabel","setChartLabel","renderChartFlag","setRenderChartFlag","chartRef","chartInstance","length","current","renderChart","fetchData","endpoint","response","get","error","console","fetchAverageAndPredictedBPData","averageBPResponse","average_systolic","average_diastolic","predictedBPResponse","ctx","getContext","destroy","chartData","labels","map","_","index","datasets","label","borderColor","borderWidth","fill","type","handleBack","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","fontWeight","id","width","height","ref","_c","$RefreshReg$"],"sources":["D:/react/bp/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nimport './App.css';\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [message, setMessage] = useState('');\n  const [chartLabel, setChartLabel] = useState('');\n  const [renderChartFlag, setRenderChartFlag] = useState(false); // Flag to control chart rendering\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n\n  useEffect(() => {\n    // Only render the chart if data is available and the component has mounted\n    if (data.length > 0 && chartRef.current && renderChartFlag) {\n      renderChart();\n    }\n  }, [data, renderChartFlag]);\n\n  const fetchData = async (endpoint) => {\n    try {\n      const response = await axios.get(`http://127.0.0.1:80/api/${endpoint}`);\n      setData(response.data);\n      setMessage(''); // Clear any previous message\n      setRenderChartFlag(true); // Set the flag to render the chart\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setMessage(`Error fetching data: ${error.message}`);\n    }\n  };\n\n  const fetchAverageAndPredictedBPData = async () => {\n    try {\n      const averageBPResponse = await axios.get('http://127.0.0.1:80/api/average_bp');\n      const { average_systolic, average_diastolic } = averageBPResponse.data;\n\n      const predictedBPResponse = await axios.get('http://127.0.0.1:80/api/calculated_bp');\n\n      // Set the message to be displayed on the website\n      setMessage(`Calculated Average Systolic Pressure is ${average_systolic} and Calculated Average Diastolic Pressure is ${average_diastolic}`);\n      setData(predictedBPResponse.data);\n      setChartLabel('Predicted Blood Pressure Data');\n      setRenderChartFlag(true); // Set renderChartFlag to true after fetching both average and predicted BP data\n    } catch (error) {\n      console.error('Error fetching average and predicted BP data:', error);\n      setMessage(`Error fetching average and predicted BP data: ${error.message}`);\n    }\n  };\n\n  const renderChart = () => {\n    const ctx = chartRef.current.getContext('2d');\n\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n\n    const chartData = {\n      labels: data.map((_, index) => index + 1),\n      datasets: [\n        {\n          label: chartLabel,\n          data: data,\n          borderColor: 'rgba(75, 192, 192, 1)',\n          borderWidth: 2,\n          fill: false,\n        },\n      ],\n    };\n\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: chartData,\n    });\n  };\n\n  const handleBack = () => {\n    // Clear the chart and data\n    setData([]);\n    setMessage(''); // Clear any previous message\n    setChartLabel('');\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    // Reset the flag to false when going back\n    setRenderChartFlag(false);\n  };\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"button-container\">\n        <button onClick={() => {\n          fetchData('ppg');\n          setChartLabel('PPG Data');\n        }}>Plot PPG Data</button>\n        <button onClick={() => {\n          fetchData('ecg');\n          setChartLabel('ECG Data');\n        }}>Plot ECG Data</button>\n        <button onClick={fetchAverageAndPredictedBPData}>Calculated Blood Pressure Data</button>\n        <button onClick={handleBack}>Back</button>\n      </div>\n\n      {/* Display the message on the website with bold styling */}\n      {message && <p style={{ fontWeight: 'bold' }}>{message}</p>}\n\n      {/* Add a canvas element to render the chart */}\n      {renderChartFlag && <canvas id=\"myChart\" width=\"400\" height=\"200\" ref={chartRef}></canvas>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}