{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\bp\\\\src\\\\ChartPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nimport { useParams, Link } from 'react-router-dom'; // Import Link\nimport './PatientRegistration.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChartPage() {\n  _s();\n  const {\n    patientId\n  } = useParams(); // Extract patientId from URL params\n  const [data, setData] = useState([]);\n  const [message, setMessage] = useState('');\n  const [chartLabel, setChartLabel] = useState('');\n  const [renderChartFlag, setRenderChartFlag] = useState(false); // Flag to control chart rendering\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  const [startFlag, setStartFlag] = useState(false);\n  useEffect(() => {\n    // Only render the chart if data is available and the component has mounted\n    if (data.length > 0 && chartRef.current && renderChartFlag) {\n      renderChart();\n    }\n  }, [data, renderChartFlag]);\n  const fetchData = async endpoint => {\n    if (!patientId) return; // Check if patientId is undefined\n\n    const fetchDataInterval = setInterval(async () => {\n      try {\n        const response = await axios.get(`http://127.0.0.1:80/api/${endpoint}/${patientId}`);\n        setData(response.data);\n        setMessage(''); // Clear any previous message\n        setRenderChartFlag(true); // Set the flag to render the chart\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setMessage(`Error fetching data: ${error.message}`);\n      }\n    }, 5000); // Repeat every 5 seconds\n\n    // Clear interval on component unmount or when endpoint changes\n    return () => clearInterval(fetchDataInterval);\n  };\n  const fetchAverageAndPredictedBPData = async () => {\n    const fetchAverageAndPredictedBPDataInterval = setInterval(async () => {\n      try {\n        const averageBPResponse = await axios.get(`http://127.0.0.1:80/api/average_bp/${patientId}`);\n        const {\n          average_systolic,\n          average_diastolic\n        } = averageBPResponse.data;\n        const predictedBPResponse = await axios.get(`http://127.0.0.1:80/api/calculated_bp/${patientId}`);\n\n        // Set the message to be displayed on the website\n        setMessage(`Calculated Average Systolic Pressure is ${average_systolic} and Calculated Average Diastolic Pressure is ${average_diastolic}`);\n        setData(predictedBPResponse.data);\n        setChartLabel('Predicted Blood Pressure Data');\n        setRenderChartFlag(true); // Set renderChartFlag to true after fetching both average and predicted BP data\n      } catch (error) {\n        console.error('Error fetching average and predicted BP data:', error);\n        setMessage(`Error fetching average and predicted BP data: ${error.message}`);\n      }\n    }, 10000); // Repeat every 5 seconds\n\n    // Clear interval on component unmount\n    return () => clearInterval(fetchAverageAndPredictedBPDataInterval);\n  };\n  const renderChart = () => {\n    const ctx = chartRef.current.getContext('2d');\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    const chartData = {\n      labels: data.map((_, index) => index + 1),\n      datasets: [{\n        label: chartLabel,\n        data: data,\n        borderColor: 'rgba(75, 192, 192, 1)',\n        borderWidth: 2,\n        fill: false,\n        pointStyle: 'hidden'\n      }]\n    };\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: chartData,\n      options: {\n        elements: {\n          point: {\n            radius: 0\n          }\n        }\n      }\n    });\n  };\n  const handleBack = () => {\n    // Clear the chart and data\n    setData([]);\n    setMessage(''); // Clear any previous message\n    setChartLabel('');\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    // Reset the flag to false when going back\n    setRenderChartFlag(false);\n  };\n  const handleMeasureStart = async () => {\n    try {\n      setMessage(\"Measuring Starting Do not Remove Your finger!\");\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Call the API endpoint to start measure\n      await axios.get('http://127.0.0.1:80/measure');\n\n      // Call the API endpoint to send data\n      await axios.post(`http://127.0.0.1:80/patient_id_api/${patientId}`);\n\n      // Update start flag\n      setStartFlag(true);\n\n      // Print \"Measuring started\"\n      setMessage('Measuring started');\n    } catch (error) {\n      console.error('Error starting measure:', error);\n      setMessage(`Error starting measure: ${error.message}`);\n    }\n  };\n  const handleMeasureStop = async () => {\n    try {\n      // Print \"Measuring Starting Do not Remove Your finger\" immediately\n      setMessage(\"Measuring Stopping Do not Remove Your finger!\");\n\n      // Delay the execution of the rest of the code for 1 second\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Call the API endpoint to stop measure\n      await axios.get('http://127.0.0.1:80/stop');\n\n      // Delay the execution of the following code block for 2 seconds\n      setTimeout(async () => {\n        try {\n          // Call the API endpoint to check status\n          const statusResponse = await axios.get('http://127.0.0.1:80/status_stop');\n          const {\n            check_stop_flag\n          } = statusResponse.data;\n\n          // Clear any previous message\n          setMessage('');\n\n          // Update start flag\n          setStartFlag(false);\n\n          // If check_stop_flag is true, print \"Measuring Stopped\" after 5 seconds\n          if (check_stop_flag) {\n            setTimeout(() => {\n              setMessage('Measuring Stopped');\n            }, 500); // 500 milliseconds = 0.5 seconds\n          }\n        } catch (error) {\n          console.error('Error checking measure status:', error);\n          setMessage(`Error checking measure status: ${error.message}`);\n        }\n      }, 4000); // 2000 milliseconds = 2 seconds\n    } catch (error) {\n      console.error('Error stopping measure:', error);\n      setMessage(`Error stopping measure: ${error.message}`);\n    }\n  };\n  const checkStatus = async () => {\n    try {\n      // Call the API endpoint to check status\n      const response = await axios.get('http://127.0.0.1:80/status');\n      setStartFlag(response.data.start_flag);\n    } catch (error) {\n      console.error('Error checking status:', error);\n      setMessage(`Error checking status: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          fetchData('ppg'); // Pass the endpoint and patientId to fetchData\n          setChartLabel('PPG Data');\n        },\n        children: \"Plot PPG Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          fetchData('ecg'); // Pass the endpoint and patientId to fetchData\n          setChartLabel('ECG Data');\n        },\n        children: \"Plot ECG Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchAverageAndPredictedBPData,\n        children: \"Calculated Blood Pressure Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBack,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMeasureStart,\n        children: \"Start Measure\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMeasureStop,\n        children: \"Stop Measure\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 19\n    }, this), renderChartFlag && /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"myChart\",\n      width: \"400\",\n      height: \"200\",\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button-container\",\n        children: \"Home page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n}\n_s(ChartPage, \"az8gx1PKdg+bgERncZBm+ZLoDWg=\", false, function () {\n  return [useParams];\n});\n_c = ChartPage;\nexport default ChartPage;\nvar _c;\n$RefreshReg$(_c, \"ChartPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","Chart","useParams","Link","jsxDEV","_jsxDEV","ChartPage","_s","patientId","data","setData","message","setMessage","chartLabel","setChartLabel","renderChartFlag","setRenderChartFlag","chartRef","chartInstance","startFlag","setStartFlag","length","current","renderChart","fetchData","endpoint","fetchDataInterval","setInterval","response","get","error","console","clearInterval","fetchAverageAndPredictedBPData","fetchAverageAndPredictedBPDataInterval","averageBPResponse","average_systolic","average_diastolic","predictedBPResponse","ctx","getContext","destroy","chartData","labels","map","_","index","datasets","label","borderColor","borderWidth","fill","pointStyle","type","options","elements","point","radius","handleBack","handleMeasureStart","Promise","resolve","setTimeout","post","handleMeasureStop","statusResponse","check_stop_flag","checkStatus","start_flag","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","fontWeight","id","width","height","ref","to","_c","$RefreshReg$"],"sources":["D:/react/bp/src/ChartPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport Chart from 'chart.js/auto';\r\nimport { useParams, Link } from 'react-router-dom'; // Import Link\r\nimport './PatientRegistration.css';\r\n\r\nfunction ChartPage() {\r\n  const { patientId } = useParams(); // Extract patientId from URL params\r\n  const [data, setData] = useState([]);\r\n  const [message, setMessage] = useState('');\r\n  const [chartLabel, setChartLabel] = useState('');\r\n  const [renderChartFlag, setRenderChartFlag] = useState(false); // Flag to control chart rendering\r\n  const chartRef = useRef(null);\r\n  const chartInstance = useRef(null);\r\n  const [startFlag, setStartFlag] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Only render the chart if data is available and the component has mounted\r\n    if (data.length > 0 && chartRef.current && renderChartFlag) {\r\n      renderChart();\r\n    }\r\n  }, [data, renderChartFlag]);\r\n\r\n  const fetchData = async (endpoint) => {\r\n    if (!patientId) return; // Check if patientId is undefined\r\n    \r\n    const fetchDataInterval = setInterval(async () => {\r\n      try {\r\n        const response = await axios.get(`http://127.0.0.1:80/api/${endpoint}/${patientId}`);\r\n        setData(response.data);\r\n        setMessage(''); // Clear any previous message\r\n        setRenderChartFlag(true); // Set the flag to render the chart\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        setMessage(`Error fetching data: ${error.message}`);\r\n      }\r\n    }, 5000); // Repeat every 5 seconds\r\n  \r\n    // Clear interval on component unmount or when endpoint changes\r\n    return () => clearInterval(fetchDataInterval);\r\n  };\r\n  \r\n  const fetchAverageAndPredictedBPData = async () => {\r\n    const fetchAverageAndPredictedBPDataInterval = setInterval(async () => {\r\n      try {\r\n        const averageBPResponse = await axios.get(`http://127.0.0.1:80/api/average_bp/${patientId}`);\r\n        const { average_systolic, average_diastolic } = averageBPResponse.data;\r\n  \r\n        const predictedBPResponse = await axios.get(`http://127.0.0.1:80/api/calculated_bp/${patientId}`);\r\n  \r\n        // Set the message to be displayed on the website\r\n        setMessage(`Calculated Average Systolic Pressure is ${average_systolic} and Calculated Average Diastolic Pressure is ${average_diastolic}`);\r\n        setData(predictedBPResponse.data);\r\n        setChartLabel('Predicted Blood Pressure Data');\r\n        setRenderChartFlag(true); // Set renderChartFlag to true after fetching both average and predicted BP data\r\n      } catch (error) {\r\n        console.error('Error fetching average and predicted BP data:', error);\r\n        setMessage(`Error fetching average and predicted BP data: ${error.message}`);\r\n      }\r\n    }, 10000); // Repeat every 5 seconds\r\n  \r\n    // Clear interval on component unmount\r\n    return () => clearInterval(fetchAverageAndPredictedBPDataInterval);\r\n  };\r\n  \r\n  const renderChart = () => {\r\n    const ctx = chartRef.current.getContext('2d');\r\n\r\n    if (chartInstance.current) {\r\n      chartInstance.current.destroy();\r\n    }\r\n\r\n    const chartData = {\r\n      labels: data.map((_, index) => index + 1),\r\n      datasets: [\r\n        {\r\n          label: chartLabel,\r\n          data: data,\r\n          borderColor: 'rgba(75, 192, 192, 1)',\r\n          borderWidth: 2,\r\n          fill: false,\r\n          pointStyle: 'hidden'\r\n        },\r\n      ],\r\n    };\r\n\r\n    chartInstance.current = new Chart(ctx, {\r\n      type: 'line',\r\n      data: chartData,\r\n      options: {\r\n        elements: {\r\n          point: {\r\n            radius: 0 \r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleBack = () => {\r\n    // Clear the chart and data\r\n    setData([]);\r\n    setMessage(''); // Clear any previous message\r\n    setChartLabel('');\r\n    if (chartInstance.current) {\r\n      chartInstance.current.destroy();\r\n    }\r\n    // Reset the flag to false when going back\r\n    setRenderChartFlag(false);\r\n  };\r\n\r\n  const handleMeasureStart = async () => {\r\n    try {\r\n       \r\n        setMessage(\"Measuring Starting Do not Remove Your finger!\");\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n        // Call the API endpoint to start measure\r\n        await axios.get('http://127.0.0.1:80/measure');\r\n\r\n        // Call the API endpoint to send data\r\n        await axios.post(`http://127.0.0.1:80/patient_id_api/${patientId}`);\r\n        \r\n        // Update start flag\r\n        setStartFlag(true);\r\n\r\n        // Print \"Measuring started\"\r\n        setMessage('Measuring started');\r\n    } catch (error) {\r\n        console.error('Error starting measure:', error);\r\n        setMessage(`Error starting measure: ${error.message}`);\r\n    }\r\n};\r\n\r\nconst handleMeasureStop = async () => {\r\n  try {\r\n    // Print \"Measuring Starting Do not Remove Your finger\" immediately\r\n    setMessage(\"Measuring Stopping Do not Remove Your finger!\");\r\n\r\n    // Delay the execution of the rest of the code for 1 second\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    // Call the API endpoint to stop measure\r\n    await axios.get('http://127.0.0.1:80/stop');\r\n    \r\n    // Delay the execution of the following code block for 2 seconds\r\n    setTimeout(async () => {\r\n      try {\r\n        // Call the API endpoint to check status\r\n        const statusResponse = await axios.get('http://127.0.0.1:80/status_stop');\r\n        const { check_stop_flag } = statusResponse.data;\r\n        \r\n        // Clear any previous message\r\n        setMessage('');\r\n        \r\n        // Update start flag\r\n        setStartFlag(false);\r\n        \r\n        // If check_stop_flag is true, print \"Measuring Stopped\" after 5 seconds\r\n        if (check_stop_flag) {\r\n          setTimeout(() => {\r\n            setMessage('Measuring Stopped');\r\n          }, 500); // 500 milliseconds = 0.5 seconds\r\n        }\r\n      } catch (error) {\r\n        console.error('Error checking measure status:', error);\r\n        setMessage(`Error checking measure status: ${error.message}`);\r\n      }\r\n    }, 4000); // 2000 milliseconds = 2 seconds\r\n  } catch (error) {\r\n    console.error('Error stopping measure:', error);\r\n    setMessage(`Error stopping measure: ${error.message}`);\r\n  }\r\n};\r\n\r\n\r\n  const checkStatus = async () => {\r\n    try {\r\n      // Call the API endpoint to check status\r\n      const response = await axios.get('http://127.0.0.1:80/status');\r\n      setStartFlag(response.data.start_flag);\r\n    } catch (error) {\r\n      console.error('Error checking status:', error);\r\n      setMessage(`Error checking status: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <div className=\"button-container\">\r\n        <button onClick={() => {\r\n          fetchData('ppg'); // Pass the endpoint and patientId to fetchData\r\n          setChartLabel('PPG Data');\r\n        }}>Plot PPG Data</button>\r\n        <button onClick={() => {\r\n          fetchData('ecg'); // Pass the endpoint and patientId to fetchData\r\n          setChartLabel('ECG Data');\r\n        }}>Plot ECG Data</button>\r\n        <button onClick={fetchAverageAndPredictedBPData}>Calculated Blood Pressure Data</button>\r\n        <button onClick={handleBack}>Back</button>\r\n      </div>\r\n\r\n      {/* Buttons for measure, stop, and status */}\r\n      <div className=\"button-container\">\r\n        <button onClick={handleMeasureStart}>Start Measure</button>\r\n        <button onClick={handleMeasureStop}>Stop Measure</button>\r\n        \r\n      </div>\r\n\r\n      {message && <p style={{ fontWeight: 'bold' }}>{message}</p>}\r\n      \r\n      {renderChartFlag && <canvas id=\"myChart\" width=\"400\" height=\"200\" ref={chartRef}></canvas>}\r\n     \r\n      <Link to=\"/\">\r\n        <button className=\"button-container\">Home page</button>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChartPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}