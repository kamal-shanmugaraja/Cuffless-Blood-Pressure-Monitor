{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\bp\\\\src\\\\SelectPatient.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate from react-router-dom\nimport styles from './SelectPatient.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SelectPatient() {\n  _s();\n  const [patientId, setPatientId] = useState('');\n  const [verificationResult, setVerificationResult] = useState('');\n  const navigate = useNavigate(); // Initialize navigate function\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      const response = await fetch('http://127.0.0.1:80/verify_patient', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          patient_id: patientId\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        if (data.exists) {\n          // Patient exists, navigate to the ChartPage route with the patientId as a URL parameter\n          navigate(`/charts/${patientId}`);\n        } else {\n          setVerificationResult('Patient does not exist');\n        }\n      } else {\n        throw new Error('Failed to verify patient');\n      }\n    } catch (error) {\n      console.error('Error verifying patient:', error);\n      setVerificationResult('Error verifying patient. Please try again.');\n    }\n  };\n  const handleChange = event => {\n    setPatientId(event.target.value);\n    // Reset the verification result when the user types a new patient ID\n    setVerificationResult('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Select Patient\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"patientId\",\n        children: \"Enter Patient ID:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"patientId\",\n        name: \"patientId\",\n        value: patientId,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), verificationResult && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: verificationResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(SelectPatient, \"5WDmCigNgY7RqdJHyOAZuvdyya8=\", false, function () {\n  return [useNavigate];\n});\n_c = SelectPatient;\nexport default SelectPatient;\nvar _c;\n$RefreshReg$(_c, \"SelectPatient\");","map":{"version":3,"names":["React","useState","useNavigate","styles","jsxDEV","_jsxDEV","SelectPatient","_s","patientId","setPatientId","verificationResult","setVerificationResult","navigate","handleSubmit","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","patient_id","ok","data","json","exists","Error","error","console","handleChange","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","name","onChange","_c","$RefreshReg$"],"sources":["D:/react/bp/src/SelectPatient.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom'; // Import useNavigate from react-router-dom\r\nimport styles from './SelectPatient.module.css'; \r\n\r\nfunction SelectPatient() {\r\n  const [patientId, setPatientId] = useState('');\r\n  const [verificationResult, setVerificationResult] = useState('');\r\n  const navigate = useNavigate(); // Initialize navigate function\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const response = await fetch('http://127.0.0.1:80/verify_patient', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ patient_id: patientId }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        if (data.exists) {\r\n          // Patient exists, navigate to the ChartPage route with the patientId as a URL parameter\r\n          navigate(`/charts/${patientId}`);\r\n        } else {\r\n          setVerificationResult('Patient does not exist');\r\n        }\r\n      } else {\r\n        throw new Error('Failed to verify patient');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error verifying patient:', error);\r\n      setVerificationResult('Error verifying patient. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    setPatientId(event.target.value);\r\n    // Reset the verification result when the user types a new patient ID\r\n    setVerificationResult('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <h2>Select Patient</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor=\"patientId\">Enter Patient ID:</label>\r\n        <input type=\"text\" id=\"patientId\" name=\"patientId\" value={patientId} onChange={handleChange} />\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n      \r\n      {verificationResult && <p>{verificationResult}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SelectPatient;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}