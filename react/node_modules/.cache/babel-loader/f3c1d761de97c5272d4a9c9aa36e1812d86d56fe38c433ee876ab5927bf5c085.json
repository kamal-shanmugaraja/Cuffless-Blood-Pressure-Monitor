{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\bp\\\\src\\\\BPData.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nimport { useParams, Link } from 'react-router-dom';\nimport './PatientRegistration.css';\nimport './ButtonContainer.css'; // Import the CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BPData() {\n  _s();\n  const {\n    patientId\n  } = useParams();\n  const [data, setData] = useState([]);\n  const [message, setMessage] = useState('');\n  const [chartLabel, setChartLabel] = useState('');\n  const [renderChartFlag, setRenderChartFlag] = useState(false);\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  const [startFlag, setStartFlag] = useState(false);\n  const [intervalId, setIntervalId] = useState(null);\n  useEffect(() => {\n    return () => clearInterval(intervalId);\n  }, [intervalId]);\n  useEffect(() => {\n    if (data.length > 0 && chartRef.current && renderChartFlag) {\n      renderChart();\n    }\n  }, [data, renderChartFlag]);\n  const fetchData = async endpoint => {\n    if (!patientId) return;\n    try {\n      const response = await axios.get(`http://127.0.0.1:80/api/${endpoint}/${patientId}`);\n      setData(response.data);\n      setMessage('');\n      setRenderChartFlag(true);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setMessage(`Error fetching data: ${error.message}`);\n    }\n  };\n  const fetchAverageAndPredictedBPData = async () => {\n    try {\n      const averageBPResponse = await axios.get(`http://127.0.0.1:80/api/average_bp/${patientId}`);\n      const {\n        average_systolic,\n        average_diastolic\n      } = averageBPResponse.data;\n      const predictedBPResponse = await axios.get(`http://127.0.0.1:80/api/calculated_bp/${patientId}`);\n      setMessage(`Calculated Average Systolic Pressure is ${average_systolic} and Calculated Average Diastolic Pressure is ${average_diastolic}`);\n      setData(predictedBPResponse.data);\n      setChartLabel('Predicted Blood Pressure Data');\n      setRenderChartFlag(true);\n    } catch (error) {\n      console.error('Error fetching average and predicted BP data:', error);\n      setMessage(`Error fetching average and predicted BP data: ${error.message}`);\n    }\n  };\n  const handleButtonClick = () => {\n    fetchAverageAndPredictedBPData();\n    const id = setInterval(fetchAverageAndPredictedBPData, 5000);\n    setIntervalId(id);\n  };\n  const renderChart = () => {\n    const ctx = chartRef.current.getContext('2d');\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    const chartData = {\n      labels: data.map((_, index) => index + 1),\n      datasets: [{\n        label: chartLabel,\n        data: data,\n        borderColor: 'rgba(75, 192, 192, 1)',\n        borderWidth: 2,\n        fill: false,\n        pointStyle: 'hidden'\n      }]\n    };\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: chartData,\n      options: {\n        elements: {\n          point: {\n            radius: 0\n          }\n        }\n      }\n    });\n  };\n  const handleBack = () => {\n    setData([]);\n    setMessage('');\n    setChartLabel('');\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    setRenderChartFlag(false);\n    clearInterval(intervalId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleButtonClick,\n        children: \"Calculated Blood Pressure Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBack,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button-container\",\n          children: \"Home page\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 19\n    }, this), renderChartFlag && /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"myChart\",\n      width: \"400\",\n      height: \"200\",\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 27\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n_s(BPData, \"SxSTIXlB8RUVFPyIE+Bc9BnFlHw=\", false, function () {\n  return [useParams];\n});\n_c = BPData;\nexport default BPData;\nvar _c;\n$RefreshReg$(_c, \"BPData\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","Chart","useParams","Link","jsxDEV","_jsxDEV","BPData","_s","patientId","data","setData","message","setMessage","chartLabel","setChartLabel","renderChartFlag","setRenderChartFlag","chartRef","chartInstance","startFlag","setStartFlag","intervalId","setIntervalId","clearInterval","length","current","renderChart","fetchData","endpoint","response","get","error","console","fetchAverageAndPredictedBPData","averageBPResponse","average_systolic","average_diastolic","predictedBPResponse","handleButtonClick","id","setInterval","ctx","getContext","destroy","chartData","labels","map","_","index","datasets","label","borderColor","borderWidth","fill","pointStyle","type","options","elements","point","radius","handleBack","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","to","style","fontWeight","width","height","ref","_c","$RefreshReg$"],"sources":["D:/react/bp/src/BPData.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport Chart from 'chart.js/auto';\r\nimport { useParams, Link } from 'react-router-dom'; \r\nimport './PatientRegistration.css';\r\nimport './ButtonContainer.css'; // Import the CSS file\r\n\r\nfunction BPData() {\r\n  const { patientId } = useParams(); \r\n  const [data, setData] = useState([]);\r\n  const [message, setMessage] = useState('');\r\n  const [chartLabel, setChartLabel] = useState('');\r\n  const [renderChartFlag, setRenderChartFlag] = useState(false); \r\n  const chartRef = useRef(null);\r\n  const chartInstance = useRef(null);\r\n  const [startFlag, setStartFlag] = useState(false);\r\n  const [intervalId, setIntervalId] = useState(null); \r\n\r\n  useEffect(() => {\r\n    return () => clearInterval(intervalId);\r\n  }, [intervalId]);\r\n\r\n  useEffect(() => {\r\n    if (data.length > 0 && chartRef.current && renderChartFlag) {\r\n      renderChart();\r\n    }\r\n  }, [data, renderChartFlag]);\r\n\r\n  const fetchData = async (endpoint) => {\r\n    if (!patientId) return; \r\n    try {\r\n      const response = await axios.get(`http://127.0.0.1:80/api/${endpoint}/${patientId}`);\r\n      setData(response.data);\r\n      setMessage(''); \r\n      setRenderChartFlag(true); \r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      setMessage(`Error fetching data: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const fetchAverageAndPredictedBPData = async () => {\r\n    try {\r\n      const averageBPResponse = await axios.get(`http://127.0.0.1:80/api/average_bp/${patientId}`);\r\n      const { average_systolic, average_diastolic } = averageBPResponse.data;\r\n\r\n      const predictedBPResponse = await axios.get(`http://127.0.0.1:80/api/calculated_bp/${patientId}`);\r\n\r\n      setMessage(`Calculated Average Systolic Pressure is ${average_systolic} and Calculated Average Diastolic Pressure is ${average_diastolic}`);\r\n      setData(predictedBPResponse.data);\r\n      setChartLabel('Predicted Blood Pressure Data');\r\n      setRenderChartFlag(true); \r\n    } catch (error) {\r\n      console.error('Error fetching average and predicted BP data:', error);\r\n      setMessage(`Error fetching average and predicted BP data: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const handleButtonClick = () => {\r\n    fetchAverageAndPredictedBPData();\r\n    const id = setInterval(fetchAverageAndPredictedBPData, 5000);\r\n    setIntervalId(id);\r\n  };\r\n\r\n  const renderChart = () => {\r\n    const ctx = chartRef.current.getContext('2d');\r\n\r\n    if (chartInstance.current) {\r\n      chartInstance.current.destroy();\r\n    }\r\n\r\n    const chartData = {\r\n      labels: data.map((_, index) => index + 1),\r\n      datasets: [\r\n        {\r\n          label: chartLabel,\r\n          data: data,\r\n          borderColor: 'rgba(75, 192, 192, 1)',\r\n          borderWidth: 2,\r\n          fill: false,\r\n          pointStyle: 'hidden'\r\n        },\r\n      ],\r\n    };\r\n\r\n    chartInstance.current = new Chart(ctx, {\r\n      type: 'line',\r\n      data: chartData,\r\n      options: {\r\n        elements: {\r\n          point: {\r\n            radius: 0 \r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setData([]);\r\n    setMessage(''); \r\n    setChartLabel('');\r\n    if (chartInstance.current) {\r\n      chartInstance.current.destroy();\r\n    }\r\n    setRenderChartFlag(false);\r\n    clearInterval(intervalId);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <div className=\"button-container\">\r\n        <button onClick={handleButtonClick}>Calculated Blood Pressure Data</button>\r\n        <button onClick={handleBack}>Back</button>\r\n        <Link to=\"/\">\r\n          <button className=\"button-container\">Home page</button>\r\n        </Link>\r\n      </div>\r\n\r\n      {message && <p style={{ fontWeight: 'bold' }}>{message}</p>}\r\n      \r\n      {renderChartFlag && <canvas id=\"myChart\" width=\"400\" height=\"200\" ref={chartRef}></canvas>}\r\n     \r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BPData;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}