{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\bp\\\\src\\\\ChartPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nimport { useParams, Link } from 'react-router-dom';\nimport './PatientRegistration.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChartPage() {\n  _s();\n  const {\n    patientId\n  } = useParams();\n  const [data, setData] = useState([]);\n  const [message, setMessage] = useState('');\n  const [chartLabel, setChartLabel] = useState('');\n  const [renderChartFlag, setRenderChartFlag] = useState(false);\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  const [startFlag, setStartFlag] = useState(false);\n  useEffect(() => {\n    // Fetch data initially\n    fetchData('ppg');\n    setChartLabel('PPG Data');\n\n    // Start interval to fetch data and update chart every 10 seconds\n    const intervalId = setInterval(() => {\n      fetchData(chartLabel.toLowerCase()); // Fetch data for the current chart type\n    }, 10000);\n    return () => {\n      clearInterval(intervalId); // Cleanup the interval on component unmount\n    };\n  }, []);\n  useEffect(() => {\n    // Render chart when data or chartLabel changes\n    if (data.length > 0 && chartRef.current && renderChartFlag) {\n      renderChart();\n    }\n  }, [data, chartLabel, renderChartFlag]);\n  const fetchData = async endpoint => {\n    if (!patientId) return;\n    try {\n      const response = await axios.get(`http://127.0.0.1:80/api/${endpoint}/${patientId}`);\n      setData(response.data);\n      setMessage('');\n      setRenderChartFlag(true);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setMessage(`Error fetching data: ${error.message}`);\n    }\n  };\n  const renderChart = () => {\n    const ctx = chartRef.current.getContext('2d');\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    const chartData = {\n      labels: data.map((_, index) => index + 1),\n      datasets: [{\n        label: chartLabel,\n        data: data,\n        borderColor: 'rgba(75, 192, 192, 1)',\n        borderWidth: 2,\n        fill: false,\n        pointStyle: 'hidden'\n      }]\n    };\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: chartData,\n      options: {\n        elements: {\n          point: {\n            radius: 0\n          }\n        }\n      }\n    });\n  };\n  const handleBack = () => {\n    setData([]);\n    setMessage('');\n    setChartLabel('');\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    setRenderChartFlag(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          fetchData('ppg');\n          setChartLabel('PPG Data');\n        },\n        children: \"Plot PPG Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          fetchData('ecg');\n          setChartLabel('ECG Data');\n        },\n        children: \"Plot ECG Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBack,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 19\n    }, this), renderChartFlag && /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"myChart\",\n      width: \"400\",\n      height: \"200\",\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button-container\",\n        children: \"Home page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n_s(ChartPage, \"ny9vbwM1n6TkgsOz9O+R1cdbUjM=\", false, function () {\n  return [useParams];\n});\n_c = ChartPage;\nexport default ChartPage;\nvar _c;\n$RefreshReg$(_c, \"ChartPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","Chart","useParams","Link","jsxDEV","_jsxDEV","ChartPage","_s","patientId","data","setData","message","setMessage","chartLabel","setChartLabel","renderChartFlag","setRenderChartFlag","chartRef","chartInstance","startFlag","setStartFlag","fetchData","intervalId","setInterval","toLowerCase","clearInterval","length","current","renderChart","endpoint","response","get","error","console","ctx","getContext","clearRect","canvas","width","height","destroy","chartData","labels","map","_","index","datasets","label","borderColor","borderWidth","fill","pointStyle","type","options","elements","point","radius","handleBack","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","fontWeight","id","ref","to","_c","$RefreshReg$"],"sources":["D:/react/bp/src/ChartPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport Chart from 'chart.js/auto';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport './PatientRegistration.css';\r\n\r\nfunction ChartPage() {\r\n  const { patientId } = useParams();\r\n  const [data, setData] = useState([]);\r\n  const [message, setMessage] = useState('');\r\n  const [chartLabel, setChartLabel] = useState('');\r\n  const [renderChartFlag, setRenderChartFlag] = useState(false);\r\n  const chartRef = useRef(null);\r\n  const chartInstance = useRef(null);\r\n  const [startFlag, setStartFlag] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Fetch data initially\r\n    fetchData('ppg');\r\n    setChartLabel('PPG Data');\r\n\r\n    // Start interval to fetch data and update chart every 10 seconds\r\n    const intervalId = setInterval(() => {\r\n      fetchData(chartLabel.toLowerCase()); // Fetch data for the current chart type\r\n    }, 10000);\r\n\r\n    return () => {\r\n      clearInterval(intervalId); // Cleanup the interval on component unmount\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Render chart when data or chartLabel changes\r\n    if (data.length > 0 && chartRef.current && renderChartFlag) {\r\n      renderChart();\r\n    }\r\n  }, [data, chartLabel, renderChartFlag]);\r\n\r\n  const fetchData = async (endpoint) => {\r\n    if (!patientId) return;\r\n    try {\r\n      const response = await axios.get(`http://127.0.0.1:80/api/${endpoint}/${patientId}`);\r\n      setData(response.data);\r\n      setMessage('');\r\n      setRenderChartFlag(true);\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      setMessage(`Error fetching data: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const renderChart = () => {\r\n    const ctx = chartRef.current.getContext('2d');\r\n\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n    if (chartInstance.current) {\r\n      chartInstance.current.destroy();\r\n    }\r\n\r\n    const chartData = {\r\n      labels: data.map((_, index) => index + 1),\r\n      datasets: [\r\n        {\r\n          label: chartLabel,\r\n          data: data,\r\n          borderColor: 'rgba(75, 192, 192, 1)',\r\n          borderWidth: 2,\r\n          fill: false,\r\n          pointStyle: 'hidden'\r\n        },\r\n      ],\r\n    };\r\n\r\n    chartInstance.current = new Chart(ctx, {\r\n      type: 'line',\r\n      data: chartData,\r\n      options: {\r\n        elements: {\r\n          point: {\r\n            radius: 0 \r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setData([]);\r\n    setMessage('');\r\n    setChartLabel('');\r\n    if (chartInstance.current) {\r\n      chartInstance.current.destroy();\r\n    }\r\n    setRenderChartFlag(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <div className=\"button-container\">\r\n        <button onClick={() => {\r\n          fetchData('ppg');\r\n          setChartLabel('PPG Data');\r\n        }}>Plot PPG Data</button>\r\n        <button onClick={() => {\r\n          fetchData('ecg');\r\n          setChartLabel('ECG Data');\r\n        }}>Plot ECG Data</button>\r\n        <button onClick={handleBack}>Back</button>\r\n      </div>\r\n\r\n      {message && <p style={{ fontWeight: 'bold' }}>{message}</p>}\r\n      \r\n      {renderChartFlag && <canvas id=\"myChart\" width=\"400\" height=\"200\" ref={chartRef}></canvas>}\r\n     \r\n      <Link to=\"/\">\r\n        <button className=\"button-container\">Home page</button>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChartPage;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}