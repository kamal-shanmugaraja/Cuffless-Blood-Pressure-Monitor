{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\bp\\\\src\\\\MeasurementComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport './MeasurementComponent.css'; // Import CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MeasurementComponent = () => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [startFlag, setStartFlag] = useState(false);\n  const {\n    patientId\n  } = useParams();\n  useEffect(() => {\n    // Fetch patient data or perform other operations based on patientId\n  }, [patientId]);\n  const handleMeasureStart = async () => {\n    try {\n      setMessage(\"Measuring Starting Do not Remove Your finger!\");\n      await new Promise(resolve => setTimeout(resolve, 4000));\n      await axios.get('http://127.0.0.1:80/measure');\n      await axios.post(`http://127.0.0.1:80/patient_id_api/${patientId}`);\n      setStartFlag(true);\n      setMessage('Measuring started');\n    } catch (error) {\n      console.error('Error starting measure:', error);\n      setMessage(`Error starting measure: ${error.message}`);\n    }\n  };\n  const handleMeasureStop = async () => {\n    try {\n      setMessage(\"Measuring Stopping. Do not remove your finger!\");\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      await axios.get('http://127.0.0.1:80/stop');\n      // Define a function to check the status repeatedly until conditions are satisfied\n      const checkStatus = async () => {\n        try {\n          // Call the API endpoint to check status\n          const statusResponse = await axios.get('http://127.0.0.1:80/status_stop');\n          const {\n            check_stop_flag\n          } = statusResponse.data;\n          // If check_stop_flag is true, update message and set start flag to false\n          if (check_stop_flag) {\n            setMessage('Measuring Stopped');\n            setStartFlag(false);\n          } else {\n            // If check_stop_flag is false, wait for 1 second and check again\n            setTimeout(checkStatus, 1000); // Wait for 1 second before checking again\n          }\n        } catch (error) {\n          console.error('Error checking measure status:', error);\n          setMessage(`Error checking measure status: ${error.message}`);\n        }\n      };\n      // Start checking status\n      await checkStatus();\n    } catch (error) {\n      console.error('Error stopping measure:', error);\n      setMessage(`Error stopping measure: ${error.message}`);\n    }\n  };\n  const checkStatus = async () => {\n    try {\n      // Call the API endpoint to check status\n      const response = await axios.get('http://127.0.0.1:80/status');\n      setStartFlag(response.data.start_flag);\n    } catch (error) {\n      console.error('Error checking status:', error);\n      setMessage(`Error checking status: ${error.message}`);\n    }\n  };\n  const navigateTo = path => {\n    window.location.href = path;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"measurement-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-measurement-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigateTo(`/ecg-data/${patientId}`),\n        children: \"ECG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigateTo(`/ppg-data/${patientId}`),\n        children: \"PPG\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigateTo(`/bp-data/${patientId}`),\n        children: \"BP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMeasureStart,\n        children: \"Start Measure\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMeasureStop,\n        children: \"Stop Measure\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => navigateTo(\"/\"),\n      className: \"home-link\",\n      children: \"Home page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(MeasurementComponent, \"PD6wwKJU5go2s+SB+l+vwUNCtOI=\", false, function () {\n  return [useParams];\n});\n_c = MeasurementComponent;\nexport default MeasurementComponent;\nvar _c;\n$RefreshReg$(_c, \"MeasurementComponent\");","map":{"version":3,"names":["React","useState","useEffect","axios","useParams","jsxDEV","_jsxDEV","MeasurementComponent","_s","message","setMessage","startFlag","setStartFlag","patientId","handleMeasureStart","Promise","resolve","setTimeout","get","post","error","console","handleMeasureStop","checkStatus","statusResponse","check_stop_flag","data","response","start_flag","navigateTo","path","window","location","href","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/react/bp/src/MeasurementComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\nimport './MeasurementComponent.css'; // Import CSS file\r\n\r\nconst MeasurementComponent = () => {\r\n  const [message, setMessage] = useState('');\r\n  const [startFlag, setStartFlag] = useState(false);\r\n  const { patientId } = useParams();\r\n\r\n  useEffect(() => {\r\n    // Fetch patient data or perform other operations based on patientId\r\n  }, [patientId]);\r\n\r\n  const handleMeasureStart = async () => {\r\n    try {\r\n       \r\n        setMessage(\"Measuring Starting Do not Remove Your finger!\");\r\n        await new Promise(resolve => setTimeout(resolve, 4000));\r\n\r\n        await axios.get('http://127.0.0.1:80/measure');\r\n        await axios.post(`http://127.0.0.1:80/patient_id_api/${patientId}`);\r\n        setStartFlag(true);\r\n        setMessage('Measuring started');\r\n    } catch (error) {\r\n        console.error('Error starting measure:', error);\r\n        setMessage(`Error starting measure: ${error.message}`);\r\n    }\r\n};\r\n\r\n  const handleMeasureStop = async () => {\r\n    try {\r\n      \r\n      setMessage(\"Measuring Stopping. Do not remove your finger!\");\r\n      await new Promise(resolve => setTimeout(resolve, 3000));\r\n      await axios.get('http://127.0.0.1:80/stop');\r\n      // Define a function to check the status repeatedly until conditions are satisfied\r\n      const checkStatus = async () => {\r\n        try {\r\n          // Call the API endpoint to check status\r\n          const statusResponse = await axios.get('http://127.0.0.1:80/status_stop');\r\n          const { check_stop_flag } = statusResponse.data;\r\n          // If check_stop_flag is true, update message and set start flag to false\r\n          if (check_stop_flag) {\r\n            setMessage('Measuring Stopped');\r\n            setStartFlag(false);\r\n          } else {\r\n            // If check_stop_flag is false, wait for 1 second and check again\r\n            setTimeout(checkStatus, 1000); // Wait for 1 second before checking again\r\n          }\r\n        } catch (error) {\r\n          console.error('Error checking measure status:', error);\r\n          setMessage(`Error checking measure status: ${error.message}`);\r\n        }\r\n      };\r\n      // Start checking status\r\n      await checkStatus();\r\n    } catch (error) {\r\n      console.error('Error stopping measure:', error);\r\n      setMessage(`Error stopping measure: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const checkStatus = async () => {\r\n    try {\r\n      // Call the API endpoint to check status\r\n      const response = await axios.get('http://127.0.0.1:80/status');\r\n      setStartFlag(response.data.start_flag);\r\n    } catch (error) {\r\n      console.error('Error checking status:', error);\r\n      setMessage(`Error checking status: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const navigateTo = (path) => {\r\n    window.location.href = path;\r\n  };\r\n\r\n  return (\r\n    <div className=\"measurement-container\">\r\n      <div className=\"button-measurement-container\">\r\n        <button onClick={() => navigateTo(`/ecg-data/${patientId}`)}>ECG</button>\r\n        <button onClick={() => navigateTo(`/ppg-data/${patientId}`)}>PPG</button>\r\n        <button onClick={() => navigateTo(`/bp-data/${patientId}`)}>BP</button>\r\n        <button onClick={handleMeasureStart}>Start Measure</button>\r\n        <button onClick={handleMeasureStop}>Stop Measure</button>\r\n      </div>\r\n\r\n      {/* Additional rendering based on conditions */}\r\n      {message && <p className=\"message\">{message}</p>}\r\n\r\n      {/* Button for navigating to home page */}\r\n      <button onClick={() => navigateTo(\"/\")} className=\"home-link\">Home page</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MeasurementComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}