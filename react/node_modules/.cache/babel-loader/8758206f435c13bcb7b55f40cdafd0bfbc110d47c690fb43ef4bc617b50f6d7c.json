{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\bp\\\\src\\\\ChartPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport Chart from 'chart.js/auto';\nimport { useParams, Link } from 'react-router-dom'; // Import Link\nimport './PatientRegistration.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChartPage() {\n  _s();\n  const {\n    patientId\n  } = useParams(); // Extract patientId from URL params\n  const [data, setData] = useState([]);\n  const [message, setMessage] = useState('');\n  const [chartLabel, setChartLabel] = useState('');\n  const [renderChartFlag, setRenderChartFlag] = useState(false); // Flag to control chart rendering\n  const chartRef = useRef(null);\n  const chartInstance = useRef(null);\n  const [startFlag, setStartFlag] = useState(false);\n  const [selectedEndpoint, setSelectedEndpoint] = useState('ppg'); // Initial endpoint\n\n  useEffect(() => {\n    // Only render the chart if data is available and the component has mounted\n    if (data.length > 0 && chartRef.current && renderChartFlag) {\n      renderChart();\n    }\n\n    // Set up an interval to fetch data and update chart every 10 seconds\n    const intervalId = setInterval(async () => {\n      try {\n        const endpoint = startFlag ? 'live_data' : selectedEndpoint; // Use \"live_data\" when measuring, otherwise use \"ppg\"\n        const response = await axios.get(`http://127.0.0.1:80/api/${endpoint}/${patientId}`);\n        setData(response.data);\n        setChartLabel(endpoint === 'live_data' ? 'Live Data' : 'PPG Data'); // Update chart label based on endpoint\n        if (renderChartFlag) {\n          // Only render if flag is true\n          renderChart();\n        }\n      } catch (error) {\n        console.error('Error fetching data in interval:', error);\n        setMessage(`Error fetching data: ${error.message}`);\n      }\n    }, 5000); // Interval set to 5 seconds (5000 milliseconds)\n\n    // Clean up the interval when the component unmounts\n    return () => clearInterval(intervalId);\n  }, [data, renderChartFlag, startFlag, selectedEndpoint]); // Update dependencies\n\n  const fetchData = async endpoint => {\n    if (!patientId) return; // Check if patientId is undefined\n    try {\n      const response = await axios.get(`http://127.0.0.1:80/api/${endpoint}/${patientId}`);\n      setData(response.data);\n      setMessage(''); // Clear any previous message\n      setRenderChartFlag(true); // Set the flag to render the chart\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setMessage(`Error fetching data: ${error.message}`);\n    }\n  };\n  const fetchAverageAndPredictedBPData = async () => {\n    try {\n      const averageBPResponse = await axios.get(`http://127.0.0.1:80/api/average_bp/${patientId}`);\n      const {\n        average_systolic,\n        average_diastolic\n      } = averageBPResponse.data;\n      const predictedBPResponse = await axios.get(`http://127.0.0.1:80/api/calculated_bp/${patientId}`);\n\n      // Set the message to be displayed on the website\n      setMessage(`Calculated Average Systolic Pressure is ${average_systolic} and Calculated Average Diastolic Pressure is ${average_diastolic}`);\n      setData(predictedBPResponse.data);\n      setChartLabel('Predicted Blood Pressure Data');\n      setRenderChartFlag(true); // Set renderChartFlag to true after fetching both average and predicted BP data\n    } catch (error) {\n      console.error('Error fetching average and predicted BP data:', error);\n      setMessage(`Error fetching average and predicted BP data: ${error.message}`);\n    }\n  };\n  const renderChart = () => {\n    const ctx = chartRef.current.getContext('2d');\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    const chartData = {\n      labels: data.map((_, index) => index + 1),\n      datasets: [{\n        label: chartLabel,\n        data: data,\n        borderColor: 'rgba(75, 192, 192, 1)',\n        borderWidth: 2,\n        fill: false,\n        pointStyle: 'hidden'\n      }]\n    };\n    chartInstance.current = new Chart(ctx, {\n      type: 'line',\n      data: chartData,\n      options: {\n        elements: {\n          point: {\n            radius: 0\n          }\n        }\n      }\n    });\n  };\n  const handleBack = () => {\n    // Clear the chart and data\n    setData([]);\n    setMessage(''); // Clear any previous message\n    setChartLabel('');\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n    // Reset the flag to false when going back\n    setRenderChartFlag(false);\n  };\n  const handleMeasureStart = async () => {\n    try {\n      setMessage(\"Measuring Starting Do not Remove Your finger!\");\n      await new Promise(resolve => setTimeout(resolve, 3000));\n\n      // Call the API endpoint to start measure\n      await axios.get('http://127.0.0.1:80/measure');\n\n      // Call the API endpoint to send data\n      await axios.post(`http://127.0.0.1:80/patient_id_api/${patientId}`);\n\n      // Update start flag\n      setStartFlag(true);\n\n      // Print \"Measuring started\"\n      setMessage('Measuring started');\n    } catch (error) {\n      console.error('Error starting measure:', error);\n      setMessage(`Error starting measure: ${error.message}`);\n    }\n  };\n  const handleMeasureStop = async () => {\n    try {\n      // Print \"Measuring Starting Do not Remove Your finger\" immediately\n      setMessage(\"Measuring Stopping Do not Remove Your finger!\");\n\n      // Delay the execution of the rest of the code for 1 second\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Call the API endpoint to stop measure\n      await axios.get('http://127.0.0.1:80/stop');\n\n      // Define a function to check the status repeatedly until conditions are satisfied\n      const checkStatus = async () => {\n        try {\n          // Call the API endpoint to check status\n          const statusResponse = await axios.get('http://127.0.0.1:80/status_stop');\n          const {\n            check_stop_flag\n          } = statusResponse.data;\n\n          // If check_stop_flag is true, update message and set start flag to false\n          if (check_stop_flag) {\n            setMessage('Measuring Stopped');\n            setStartFlag(false);\n          } else {\n            // If check_stop_flag is false, wait for 1 second and check again\n            setTimeout(checkStatus, 1000); // Wait for 1 second before checking again\n          }\n        } catch (error) {\n          console.error('Error checking measure status:', error);\n          setMessage(`Error checking measure status: ${error.message}`);\n        }\n      };\n\n      // Start checking status\n      await checkStatus();\n    } catch (error) {\n      console.error('Error stopping measure:', error);\n      setMessage(`Error stopping measure: ${error.message}`);\n    }\n  };\n  const checkStatus = async () => {\n    try {\n      // Call the API endpoint to check status\n      const response = await axios.get('http://127.0.0.1:80/status');\n      setStartFlag(response.data.start_flag);\n    } catch (error) {\n      console.error('Error checking status:', error);\n      setMessage(`Error checking status: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          fetchData('ppg'); // Pass the endpoint and patientId to fetchData\n          setChartLabel('PPG Data');\n        },\n        children: \"Plot PPG Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          fetchData('ecg'); // Pass the endpoint and patientId to fetchData\n          setSelectedEndpoint('ecg'); // Set selectedEndpoint to 'ecg\n          setChartLabel('ECG Data');\n        },\n        children: \"Plot ECG Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          fetchAverageAndPredictedBPData();\n          setSelectedEndpoint('bp'); // Set selectedEndpoint to 'bp'\n          setChartLabel('Predicted Blood Pressure Data');\n        },\n        children: \"Calculated Blood Pressure Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBack,\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMeasureStart,\n        children: \"Start Measure\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMeasureStop,\n        children: \"Stop Measure\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 19\n    }, this), renderChartFlag && /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"myChart\",\n      width: \"400\",\n      height: \"200\",\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button-container\",\n        children: \"Home page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n}\n_s(ChartPage, \"bH5TMXyzPex9aZDUS8vY0unH5Go=\", false, function () {\n  return [useParams];\n});\n_c = ChartPage;\nexport default ChartPage;\nvar _c;\n$RefreshReg$(_c, \"ChartPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","Chart","useParams","Link","jsxDEV","_jsxDEV","ChartPage","_s","patientId","data","setData","message","setMessage","chartLabel","setChartLabel","renderChartFlag","setRenderChartFlag","chartRef","chartInstance","startFlag","setStartFlag","selectedEndpoint","setSelectedEndpoint","length","current","renderChart","intervalId","setInterval","endpoint","response","get","error","console","clearInterval","fetchData","fetchAverageAndPredictedBPData","averageBPResponse","average_systolic","average_diastolic","predictedBPResponse","ctx","getContext","destroy","chartData","labels","map","_","index","datasets","label","borderColor","borderWidth","fill","pointStyle","type","options","elements","point","radius","handleBack","handleMeasureStart","Promise","resolve","setTimeout","post","handleMeasureStop","checkStatus","statusResponse","check_stop_flag","start_flag","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","fontWeight","id","width","height","ref","to","_c","$RefreshReg$"],"sources":["D:/react/bp/src/ChartPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport Chart from 'chart.js/auto';\r\nimport { useParams, Link } from 'react-router-dom'; // Import Link\r\nimport './PatientRegistration.css';\r\n\r\nfunction ChartPage() {\r\n  const { patientId } = useParams(); // Extract patientId from URL params\r\n  const [data, setData] = useState([]);\r\n  const [message, setMessage] = useState('');\r\n  const [chartLabel, setChartLabel] = useState('');\r\n  const [renderChartFlag, setRenderChartFlag] = useState(false); // Flag to control chart rendering\r\n  const chartRef = useRef(null);\r\n  const chartInstance = useRef(null);\r\n  const [startFlag, setStartFlag] = useState(false);\r\n  const [selectedEndpoint, setSelectedEndpoint] = useState('ppg'); // Initial endpoint\r\n\r\n  useEffect(() => {\r\n    // Only render the chart if data is available and the component has mounted\r\n    if (data.length > 0 && chartRef.current && renderChartFlag) {\r\n      renderChart();\r\n    }\r\n  \r\n    // Set up an interval to fetch data and update chart every 10 seconds\r\n    const intervalId = setInterval(async () => {\r\n      try {\r\n        const endpoint = startFlag ? 'live_data' : selectedEndpoint; // Use \"live_data\" when measuring, otherwise use \"ppg\"\r\n        const response = await axios.get(`http://127.0.0.1:80/api/${endpoint}/${patientId}`);\r\n        setData(response.data);\r\n        setChartLabel(endpoint === 'live_data' ? 'Live Data' : 'PPG Data'); // Update chart label based on endpoint\r\n        if (renderChartFlag) { // Only render if flag is true\r\n          renderChart();\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching data in interval:', error);\r\n        setMessage(`Error fetching data: ${error.message}`);\r\n      }\r\n    }, 5000); // Interval set to 5 seconds (5000 milliseconds)\r\n  \r\n    // Clean up the interval when the component unmounts\r\n    return () => clearInterval(intervalId);\r\n  }, [data, renderChartFlag, startFlag, selectedEndpoint]); // Update dependencies\r\n  \r\n\r\n  const fetchData = async (endpoint) => {\r\n    if (!patientId) return; // Check if patientId is undefined\r\n    try {\r\n      const response = await axios.get(`http://127.0.0.1:80/api/${endpoint}/${patientId}`);\r\n      setData(response.data);\r\n      setMessage(''); // Clear any previous message\r\n      setRenderChartFlag(true); // Set the flag to render the chart\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      setMessage(`Error fetching data: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  const fetchAverageAndPredictedBPData = async () => {\r\n    try {\r\n      const averageBPResponse = await axios.get(`http://127.0.0.1:80/api/average_bp/${patientId}`);\r\n      const { average_systolic, average_diastolic } = averageBPResponse.data;\r\n\r\n      const predictedBPResponse = await axios.get(`http://127.0.0.1:80/api/calculated_bp/${patientId}`);\r\n\r\n      // Set the message to be displayed on the website\r\n      setMessage(`Calculated Average Systolic Pressure is ${average_systolic} and Calculated Average Diastolic Pressure is ${average_diastolic}`);\r\n      setData(predictedBPResponse.data);\r\n      setChartLabel('Predicted Blood Pressure Data');\r\n      setRenderChartFlag(true); // Set renderChartFlag to true after fetching both average and predicted BP data\r\n    } catch (error) {\r\n      console.error('Error fetching average and predicted BP data:', error);\r\n      setMessage(`Error fetching average and predicted BP data: ${error.message}`);\r\n    }\r\n  };\r\n  \r\n  const renderChart = () => {\r\n    const ctx = chartRef.current.getContext('2d');\r\n\r\n    if (chartInstance.current) {\r\n      chartInstance.current.destroy();\r\n    }\r\n\r\n    const chartData = {\r\n      labels: data.map((_, index) => index + 1),\r\n      datasets: [\r\n        {\r\n          label: chartLabel,\r\n          data: data,\r\n          borderColor: 'rgba(75, 192, 192, 1)',\r\n          borderWidth: 2,\r\n          fill: false,\r\n          pointStyle: 'hidden'\r\n        },\r\n      ],\r\n    };\r\n\r\n    chartInstance.current = new Chart(ctx, {\r\n      type: 'line',\r\n      data: chartData,\r\n      options: {\r\n        elements: {\r\n          point: {\r\n            radius: 0 \r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleBack = () => {\r\n    // Clear the chart and data\r\n    setData([]);\r\n    setMessage(''); // Clear any previous message\r\n    setChartLabel('');\r\n    if (chartInstance.current) {\r\n      chartInstance.current.destroy();\r\n    }\r\n    // Reset the flag to false when going back\r\n    setRenderChartFlag(false);\r\n  };\r\n\r\n  const handleMeasureStart = async () => {\r\n    try {\r\n       \r\n        setMessage(\"Measuring Starting Do not Remove Your finger!\");\r\n        await new Promise(resolve => setTimeout(resolve, 3000));\r\n\r\n        // Call the API endpoint to start measure\r\n        await axios.get('http://127.0.0.1:80/measure');\r\n\r\n        // Call the API endpoint to send data\r\n        await axios.post(`http://127.0.0.1:80/patient_id_api/${patientId}`);\r\n        \r\n        // Update start flag\r\n        setStartFlag(true);\r\n\r\n        // Print \"Measuring started\"\r\n        setMessage('Measuring started');\r\n    } catch (error) {\r\n        console.error('Error starting measure:', error);\r\n        setMessage(`Error starting measure: ${error.message}`);\r\n    }\r\n};\r\n\r\nconst handleMeasureStop = async () => {\r\n  try {\r\n    // Print \"Measuring Starting Do not Remove Your finger\" immediately\r\n    setMessage(\"Measuring Stopping Do not Remove Your finger!\");\r\n\r\n    // Delay the execution of the rest of the code for 1 second\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n    // Call the API endpoint to stop measure\r\n    await axios.get('http://127.0.0.1:80/stop');\r\n\r\n    // Define a function to check the status repeatedly until conditions are satisfied\r\n    const checkStatus = async () => {\r\n      try {\r\n        // Call the API endpoint to check status\r\n        const statusResponse = await axios.get('http://127.0.0.1:80/status_stop');\r\n        const { check_stop_flag } = statusResponse.data;\r\n\r\n        // If check_stop_flag is true, update message and set start flag to false\r\n        if (check_stop_flag) {\r\n          setMessage('Measuring Stopped');\r\n          setStartFlag(false);\r\n        } else {\r\n          // If check_stop_flag is false, wait for 1 second and check again\r\n          setTimeout(checkStatus, 1000); // Wait for 1 second before checking again\r\n        }\r\n      } catch (error) {\r\n        console.error('Error checking measure status:', error);\r\n        setMessage(`Error checking measure status: ${error.message}`);\r\n      }\r\n    };\r\n\r\n    // Start checking status\r\n    await checkStatus();\r\n  } catch (error) {\r\n    console.error('Error stopping measure:', error);\r\n    setMessage(`Error stopping measure: ${error.message}`);\r\n  }\r\n};\r\n\r\n\r\n\r\n  const checkStatus = async () => {\r\n    try {\r\n      // Call the API endpoint to check status\r\n      const response = await axios.get('http://127.0.0.1:80/status');\r\n      setStartFlag(response.data.start_flag);\r\n    } catch (error) {\r\n      console.error('Error checking status:', error);\r\n      setMessage(`Error checking status: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <div className=\"button-container\">\r\n        <button onClick={() => {\r\n          fetchData('ppg'); // Pass the endpoint and patientId to fetchData\r\n          setChartLabel('PPG Data');\r\n        }}>Plot PPG Data</button>\r\n        <button onClick={() => {\r\n          fetchData('ecg'); // Pass the endpoint and patientId to fetchData\r\n          setSelectedEndpoint('ecg');  // Set selectedEndpoint to 'ecg\r\n          setChartLabel('ECG Data');\r\n        }}>Plot ECG Data</button>\r\n        <button onClick={() => {\r\n          fetchAverageAndPredictedBPData();\r\n          setSelectedEndpoint('bp');    // Set selectedEndpoint to 'bp'\r\n          setChartLabel('Predicted Blood Pressure Data');\r\n        }}>Calculated Blood Pressure Data</button>\r\n        <button onClick={handleBack}>Back</button>\r\n      </div>\r\n\r\n      {/* Buttons for measure, stop, and status */}\r\n      <div className=\"button-container\">\r\n        <button onClick={handleMeasureStart}>Start Measure</button>\r\n        <button onClick={handleMeasureStop}>Stop Measure</button>\r\n        \r\n      </div>\r\n\r\n      {message && <p style={{ fontWeight: 'bold' }}>{message}</p>}\r\n      \r\n      {renderChartFlag && <canvas id=\"myChart\" width=\"400\" height=\"200\" ref={chartRef}></canvas>}\r\n     \r\n      <Link to=\"/\">\r\n        <button className=\"button-container\">Home page</button>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChartPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}